---
title:  "선형 자료구조"

categories: [프로그래밍, 개념공부]

tags: [프로그래밍]

toc: true
toc_sticky: true
 
date: 2023-05-18
last_modified_at: 2023-05-18
---

# linear, 선형구조 (배열)

# Linked List(연결 리스트)

연결 리스트는 처리할 데이터의 포인터를 가지는 리스트로, 기억장소에 데이터가 연속적으로 저장되어 있지 않아도 포인터를 이용하여 처리가 가능하다. 그러나 포인터 값으로 인한 기억장소의 낭비와 처음부터 데이터를 탐색해야 하는 단점이 있다.

```c
struct list {
  char name[10];
  int no;
  struct list *link; -> 포인터
}
```

  - 구조 : |data|pointer|
  - 추가 Algorithm |---|P(i)| -x-> |---|P(i+1)|
                        ㄴ-->|---|P(new)-->           (그냥 새로 추가하면 됨.)
    - 새로운 노드의 생성 -> 기억장소를 할당 -> malloc() 함수를 통해 해결 (memory allocate)
  - 삭제 Algorithn |---|P(i-1)| -> |---|P(i)|         (그냥 바로 삭제하면 됨.)
    - 노드의 삭제 -> 기억장소를 해제 -> free()

    단, 위의 malloc() 혹은 free()를 사용하기 위해선 #include <stdlib.h>를 통해 라이브러리를 선언해주어야 함.



# Stack(스택)과 Queue(큐)

스택과 큐는 서로 비교하며 이해하면 도움이 되는 부분이 있다. 스택(Stack)은 원소의 추가와 삭제가 리스트 한쪽 끝 부분에서만 수행되는 반면, 큐(Queue)는 데이터의 입출력이 양쪽 끝 모두에서 수행되는데, 이 때문에 서로 적당한 특징을 공유하기 때문이다.

따라서 스택은 후입선출(LIFO, Last-In-First-Out) 구조로 요약되는 반면, 큐는 선입선출(FIFO, First-In-First-Out) 구조로 요약된다.

스택에서 입출력이 이루어지는 곳을 top, 반대편 끝을 bottom이라고 부르는데, 큐에는 양쪽에서 데이터 입출력이 모두 이루어지기 때문에 bottomm이라는 개념이 쓰이지 않는다.

입출력이 이루어지는 곳을 top, 반대편 끝을 bottom이라고 부른다.

LIFO(Last-In, First-Out) 구조이며, 데이터의 입력 동작을 push, 출력 동작을 pop이라고 부른다.
시스템에서 함수 호출, 수식계산, 포스트픽스(post fix)한다.

top은 데이터 입력 시 top은 top + 1을, 데이터 삭제 시 top - 1을 수행한다.

이와 관련한 개념이 Infix, Prefix, Postfix이다.

Infix   : A+B
Prefix  : +AB
Postfix : AB+


데이터의 입출력이 양쪽 끝 방향에서 수행된되는 자료구조로, 따라서 스택과는 대조적으로 FIFO(First-In, First-Out)특징을 갖고 있다.
- 2개의 변수 tail(=rear), head(=front)를 사용하여 입출력을 제어하며, 추가시 tail += 1을 수행하고 삭제시 head += 1을 수행한다. => top 변수 1개만을 사용하던 스택과 차이를 보인다.
- 운영체제 시스템에서 프로세스(=실행중인 프로그램)의 순차처리, SpooL(Simultaneous Pheripheral Operation On Line => 출력작업) 처리 등에 사용한다.

---
# 참고