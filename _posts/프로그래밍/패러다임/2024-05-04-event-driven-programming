---
title: "이벤트 주도적 프로그래밍"
description: "이벤트 주도적 프로그래밍에 대한 사항을 정리합니다."

categories: [프로그래밍, 패러다임]
tags: [유니티]
start_with_ads: true

toc: true
toc_sticky: true

date: 2024-05-19 10:24:00 +0900
last_modified_at: 2024-05-19 10:24:00 +0900

mermaid: true
---

## **들어가며**

이벤트 주도적 프로그래밍(Event Driven Programming)은 프로그램의 흐름이 이벤트에 의해 결정되는 프로그래밍 패러다임으로, 이벤트의 발생, 관리, 실행을 주관합니다. **[현재 개발중인 게임](https://hynrng.github.io/posts/armonia-developing-first/)**에서 큰 도움이 되어 앞으로도 유용하게 사용할 수 있을 것 같아 글로 정리합니다. 주로 다음과 같은 장점이 있습니다.

- 코드의 가독성과 유지보수성을 관리할 수 있음
- 사용자 입력과 상호작용에 빠르고 직관적으로 대응할 수 있음
- 프로젝트의 확장성을 높이고 다양한 상황에 유연하게 대응할 수 있음

## **기본 개념**

이벤트 주도적 프로그래밍은 다음의 세 가지 개념으로 구현됩니다.
: - 매니저(Manager): 특정 오브젝트에 이벤트를 전파하는 역할
- 리스너(Listener): 특정 이벤트에 반응하는 역할
- 포스터(Poster): 특정 이벤트를 발생시키는 역할

## **구조 시각화**

```mermaid
sequenceDiagram
   participant App as 애플리케이션
   participant EvtMgr as 이벤트 매니저
   participant Poster as 이벤트 포스터
   participant Listener as 이벤트 리스너
   
   App->>EvtMgr: 초기화
   EvtMgr-->>App: 초기화 완료
   loop 앱 실행
       Poster->>EvtMgr: 이벤트 발생
       opt 이벤트 발생
           EvtMgr->>Listener: 리스너 호출
           Listener-->>EvtMgr: 리스너 코드 실행 완료
       end
   end
```

## **기본 코드**

```cs
public class EventManager : MonoBehaviour
{
    public static EventManager Instance { get { return instance; } }    
    private static EventManager instance = null;

    public delegate void OnEvent(EVENT_TYPE eventType, Component Sender, object Param = null);
    private Dictionary<EVENT_TYPE, List<OnEvent>> Listeners
        = new Dictionary<EVENT_TYPE, List<OnEvent>>();

    void Awake()
    {
        if (instance == null)
        {
            instance = this;
            DontDestroyOnLoad(gameObject);
            return;
        }
        DestroyImmediate(gameObject);
    }

    public void AddListener(EVENT_TYPE eventType, OnEvent Listener)
    {
        List<OnEvent> ListenList = null;

        if (Listeners.TryGetValue(eventType, out ListenList))
        {
            ListenList.Add(Listener);
            return;
        }

        ListenList = new List<OnEvent>();
        ListenList.Add(Listener);
        Listeners.Add(eventType, ListenList);
    }

    public void PostNotification(EVENT_TYPE eventType, Component Sender, object param = null)
    {
        List<OnEvent> ListenList = null;

        if (!Listeners.TryGetValue(eventType, out ListenList))
            return;

        for(int i = 0; i < ListenList.Count; i++)
             ListenList?[i](eventType, Sender, param);
    }

    public void RemoveEvent(EVENT_TYPE eventType) => Listeners.Remove(eventType);

    public void RemoveRedundancies()
    {
        Dictionary<EVENT_TYPE, List<OnEvent>> newListeners
            = new Dictionary<EVENT_TYPE, List<OnEvent>>();

        foreach(KeyValuePair<EVENT_TYPE, List<OnEvent>> Item in Listeners)
        {
            for (int i = Item.Value.Count - 1; i >= 0; i--)
                if(Item.Value[i].Equals(null))
                    Item.Value.RemoveAt(i);

            if (Item.Value.Count > 0)
                newListeners.Add(Item.Key, Item.Value);
        }

        Listeners = newListeners;
    }

    public void RemoveListener(Event eventType, OnEvent listener)
    {
        List<OnEvent> listenList = null;

        if (Listeners.TryGetValue(eventType, out listenList))
            listenList.Remove(listener);
    }

    void OnLevelWasLoaded()
    {
        RemoveRedundancies();
    }
}
```
{: file="EventManager.cs" }

델리게이트를 이용한 방법입니다. 코드는 80줄 가까이 되지만 6개 메서드만 알면 끝납니다.