---
title: "이진 트리 위주로 정리하는 그래프 자료구조"

categories: [컴퓨터과학, 자료구조]
tags: [컴퓨터과학, 자료구조, 그래프, 트리, 이진 트리, 힙]
start_with_ads: true

toc: true
toc_sticky: true

date: 2025-06-26 00:00:00 +0900
last_modified_at: 2025-06-24 00:00:00 +0900

mermaid: true
math: true
---

## **그래프와 트리**

그래프는 정점과 정점을 연결하는 간선으로 구성된 자료구조입니다. 그래프는 간선에 방향성이 있는지에 따라 방향 그래프(Directed Graph)와 무방향 그래프(Undirected Graph)로, 또 간선에 비용이 부여되는지에 따라 가중치 그래프(Weighted Graph)로 분류됩니다.

트리는 그래프의 하위 자료구조로, 하나의 루트 노드를 시작점으로 다른 모든 노드에 대한 경로가 유일하게 존재하는 자료구조를 말합니다. 이러한 구조적 특성상 트리의 간선 개수는 항상 (전체 노드 개수 - 1)입니다.

## **이진 트리 (Binary Tree)**

이진 트리는 자식 노드의 개수가 최대 2개로 제한되는 트리입니다. 각 자식은 순서를 가지며 각각 왼쪽 자식(left child)과 오른쪽 자식(right child)으로 구분됩니다. 인덱스를 $i$라고 할 때(1-based), 배열 표현에서의 부모와 자식의 인덱스 $i$는 다음과 같이 정리됩니다.

$$
\begin{aligned}
\text{left}(i) &= 2i \\
\text{right}(i) &= 2i + 1 \\
\text{parent}(i) &= \left\lfloor \frac{i}{2} \right\rfloor
\end{aligned}
$$

> C언어는 일반적으로 포인터를 사용해 구현하지만 배열만으로 표현하는 경우도 있으며, 파이썬 등에서는 배열 인덱스를 이용해 암시적으로 구현합니다.
> {: .prompt-info}

### **정 이진 트리 (Full Binary Tree)**

정 이진 트리는 모든 노드가 0개 또는 2개의 자식 노드를 갖는 트리입니다. 자식을 하나만 가진 노드가 존재하지 않으며, Proper Binary Tree 라고도 불립니다. 트리 내 리프 노드(Leaf Node)의 수를 $L$, 내부 노드(Internal Node)의 수를 $I$라고 할 때, 항상 $L = I + 1$의 관계가 성립합니다.

```mermaid
graph TD;
    subgraph 정 이진 트리
        A --> B;
        A --> C;
        B --> D;
        B --> E;
    end
```

### **완전 이진 트리 (Complete Binary Tree)**

완전 이진 트리는 마지막 레벨을 제외한 모든 레벨이 완전히 채워져 있으며, 마지막 레벨의 노드들은 반드시 좌측부터 순서대로 채워진 이진 트리입니다. 이러한 구조적 규칙성 때문에 힙(Heap) 자료구조의 기반이 되며, 배열을 사용하여 표현할 때 공간 낭비 없이 가장 효율적으로 관리될 수 있습니다.

```mermaid
graph TD;
    subgraph 완전 이진 트리
        A --> B;
        A --> C;
        B --> D;
        B --> E;
        C --> F;
    end
```

### **포화 이진 트리 (Perfect Binary Tree)**

포화 이진 트리는 모든 내부 노드가 2개의 자식 노드를 가지며, 모든 리프 노드가 동일한 깊이(depth)를 갖는 가장 이상적인 형태의 이진 트리입니다. 높이를 $h$라고 할 때(루트 높이=0), 노드의 총개수는 항상 $2^{h+1} - 1$개로 정해지며, 포화 이진 트리는 정의상 정 이진 트리와 완전 이진 트리의 속성을 모두 만족합니다.

```mermaid
graph TD;
    subgraph 포화 이진 트리
        A --> B;
        A --> C;
        B --> D;
        B --> E;
        C --> F;
        C --> G;
    end
```

## **힙 (Heap)**

힙은 **완전 이진 트리**를 기반으로 **힙 속성(Heap Property)**을 만족시키는 특수 목적의 자료구조입니다. 힙 속성이란, 부모 노드의 키(key) 값과 자식 노드의 키 값 사이에 특정 대소 관계가 트리 전체에 걸쳐 성립함을 의미합니다. 이로 인해 데이터 집합에서 최댓값 또는 최솟값을 $O(1)$의 시간 복잡도로 조회할 수 있으며, 우선순위 큐(Priority Queue)를 구현하는 가장 효율적인 자료구조로 평가됩니다.

### **최대 힙 (Max Heap)**

최대 힙은 부모 노드의 키 값이 항상 자식 노드의 키 값보다 크거나 같은($\text{parent}(i) \ge \text{child}(i)$) 완전 이진 트리입니다. 따라서 루트 노드는 항상 트리 전체에서 가장 큰 값을 유지하게 됩니다.

```mermaid
graph TD;
    subgraph 최대 힙
        100 --> 80;
        100 --> 90;
        80 --> 40;
        80 --> 50;
        90 --> 70;
    end
```

### **최소 힙 (Min Heap)**

최소 힙은 부모 노드의 키 값이 항상 자식 노드의 키 값보다 작거나 같은($\text{parent}(i) \le \text{child}(i)$) 완전 이진 트리입니다. 루트 노드는 항상 트리 전체에서 가장 작은 값을 유지하며, 이러한 성질은 다익스트라(Dijkstra)나 프림(Prim) 알고리즘에서 최소 비용을 갖는 다음 정점을 탐색하는 과정을 최적화하는 데 핵심적으로 사용됩니다.

```mermaid
graph TD;
    subgraph 최소 힙
        10 --> 20;
        10 --> 15;
        20 --> 40;
        20 --> 50;
        15 --> 30;
    end
```