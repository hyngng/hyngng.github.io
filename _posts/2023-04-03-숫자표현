---
title:  "[프로그래밍] 컴퓨터가 숫자를 표현하는 법"

categories:
  - 프로그래밍
tags:
  - [프로그래밍]

toc: true
toc_sticky: true
 
date: 2023-04-03
last_modified_at: 2023-04-03
---

<br>

# 0과 1

컴퓨터가 0과 1을 사용하는 배경에는 효율성이 있다.  
그것은 서로 다른 양 극단의 상태를 0과 1의 숫자를 이용해 나타냄과 동시에, 0과 1만을 사용하는 수 체계인 '이진법(Binay)'을 통해 수 체계를 표현할 수 있으므로, 0과 1을 통해서 논리연산과 수 연산이 모두 할 수 있기 때문이다.

<br>

# 비트와 바이트

그래서 컴퓨터는 0과 1만을 사용해 모든 것을 표현한다.  
따라서, 0 또는 1이라는 정보가 담길 공간을 요구하고, 이것은 가장 기본적인 정보 단위가 되어 비트(bit)를 구성하게 되고, 8개의 비트를 묶어 '바이트(byte)'로 나타낸다.  

<br>

# 양수와 음수 표현

일반적으로는 숫자 앞에 '-' 기호를 붙여 음수를 나타낼 수 있을 것이지만, 컴퓨터는 가장 기본적인 정보의 단위가 0 또는 1이기에 음수를 나타낼 다른 방법이 필요하며, 이를 최상위 비트에 부호 정보를 할당하여 사용함으로 해결한다.  
최상위 비트가 0이면 양수, 1이면 음수가 되는 식이다.

<br>

### 부호 절대값

이것을 부호 절대값 방식이라고 하는데, 2진수의 가장 왼쪽에 존재하는 값에 따라 양수와 음수를 판단하는 것이다.  
가령, 0001은 1, 1001은 -1이 될 것이다.

<br>

# 보수

그러나 이 방법은 뺄셈이 불가능하다. 가령, 2진수의 '0001'과 '1001'은 10진수로 변환시 1과 -1이지만 둘을 더할 시 0000이 아닌 1010이 나오게 된다. 이를 해결하기 위한 방법이 **보수(complement)**이다.  

보수는 1의 보수와 2의 보수로 나뉘는데, 1의 보수란 음수 표현시에 0을 1로, 1을 0으로 변환하는 과정을 말한다. 가령, 1은 여전히 0001이지만, -1은 1110이 될 것이다.  

1의 보수는 뺄셈을 가능케 해주지만, 0000과 1111이라는 두 가지의 '0(zero)'을 가지는 문제가 있다. 이를 보완하기 위한 방법이 2의 보수이다. 2의 보수란 음수 표현시 1의 보수에 1을 더해주는 과정을 말한다. 가령, 1은 여전히 0001이지만, -1은 1111이 될 것이다.

<br>

# 실수 표현

위의 방법은 정수를 표현하는 것에는 유효하지만, 실수를 표현하는 것에는 문제가 있다. 컴퓨터의 메모리 공간은 유한하기 때문이다. 가령, 파이(3.141592...)를 정확히 표현하기 위해서는 무한히 이어지는 소수부에 걸맞는 무한한 메모리가 필요할 것이다. 때문에 컴퓨터는 근사를 통해 소수를 표현한다. **부동소수점**이 고안되는 배경이다.  

부동소수점이란 소수점을 고정하지 않는 수 표현 방식으로, 2진법으로 변환된 수를 2의 제곱수를 이용하여 정수부를 한 자릿수만 남기고 모두 실수부로 이동시키는 방식을 말한다. 가령, 42.195에 부동소수점 방식을 적용하면 4.2195 * 10^1이 될 것이다.



<br>

---
# <b>참고</b>