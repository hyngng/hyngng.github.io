---
title: "WinUI 3로 사무실 보조 프로그램 만들기"

categories: [마일스톤, 기타 개발]
tags: [마일스톤, 기타 개발, Fluent 2]
start_with_ads: true

toc: true
toc_sticky: true

date: 2025-08-31 00:00:00 +0900
last_modified_at: 2025-08-31 00:00:00 +0900
---

<!-- ## **사회복무요원 졸업작품**

![피그마로 정성스럽게 만든 사진](사진)
_이미지 설명 캡션_ -->

## **아카이브**

- 깃허브 페이지

## **기능**

- 기능 자랑

## **개발 관련 이야기**

### **다사다난한 프레임워크 선택과정.**

1. ASP.NET & Electron
2. Electron.NET
3. WPFUI
4. ModernWPF
5. WinUI 3
6. DevWinUI

- WinUI 3은 다 좋은데 WPF에 비하면, 페이지 뷰가 없다는게 별로임.
- 그리고, 참조할만한 앱도 정말 별로 없음. DevToys, WinToys, Powertoys, Files 정도. 그나마도 작업을 위한 앱은 아닌 것 같음.

![]()
_설정, 작업 관리자 등등_

윈도우 프로그램을 만들려면 어떤 조건이 갖추어져야 하는지, 실제 개발 과정은 어떤지 모르는 상태에서 프로그램을 만들기 시작한 덕분에 프레임워크를 선택하는 것부터 어려움이 있었습니다. 처음에는 프론트엔드 개발경험을 어떻게든 사용해보려는 생각으로 [Electron.NET](https://github.com/ElectronNET/Electron.NET)도 찾아보다가, 불편함을 느끼던 도중 우연히 [Fluent 2](https://fluent2.microsoft.design/)라는 마이크로소프트 디자인 문법을 접하고 난 뒤 곧 [ModernWPF](https://github.com/Kinnara/ModernWpf) 라이브러리를 사용하는 WPF 프로젝트로 전환했고, 개발 도중 레거시 환경이 불편해 다시 WinUI 3 프로젝트로 개발환경을 옮긴 뒤 최종적으로 정착했습니다.

WinUI 3 환경에 정착할 수 있었던 것은 [Windows Community Toolkit](https://github.com/CommunityToolkit/WindowsCommunityToolkit)과 [DevWinUI](https://github.com/ghost1372/DevWinUI)라는 훌륭한 컨트롤 라이브러리 덕입니다. UI가 있는 .NET 개발환경에서는 UI 요소를 컨트롤이라고 부르는데, 순수 WinUI의 컨트롤에 더불어 두 라이브러리가 제공하는 컨트롤을 적절히 혼합해서 사용해봤는데 웬만한 상황은 다 구현할 수 있었습니다.

### **C#과 XAML**

- .NET 환경 처음이었음
- MVVM 패턴 처음이었음
- XAML에 x:Name="TagName" 선언해두면 코드비하인드에서 따로 private variable tagName = GetTag("TagName") 안 해도 되는게 인상깊었음.

보통은 잘 사용하지 않는 .NET과 WinUI 3 프레임워크 환경을 선택한 이유는 유니티 개발 경험으로 어느정도 익숙한 C#을 보다 넓은 영역에서 활용해보기 위해서입니다.

WinUI 3 프레임워크가 가져다주는 개발 경험은 프론트엔드 웹 개발을 강하게 연상하게 하고 그래서 처음에 좀 놀랐습니다. XAML로 UI 구성 요소와 속성을 정의하고 C#으로 세부 로직을 작성하는 것이 HTML과 자바스크립트의 관계와 매우 닮았고, 덕분에 낯선 인상을 빠르게 지울 수 있었습니다.

세부적으로는 `<control x:Name="TagName">`와 같이 선언하면

### **MVVM 패턴**

이 프로젝트에서 가장 생소했던 부분입니다. MVVM은 소프트웨어 아키텍처상의 개념으로 의미 자체는 코드간 의존도를 낮추기 위한 방법론에 가깝기 때문에 낯설지 않았지만, MVVM을 구성하는 모델, 뷰, 뷰모델 세 가지 영역을 실제로 어떻게 구분하고 구현하는지에 대해서는 공부할 필요가 있었습니다.

MVVM은 세 가지 구성요소만 잘 구분하면 되는 것 같고 실제로 그렇게만 만들어도 MVVM 구조를 따랐다고 할 수 있을 것 같기는 하지만, [WinUI-Gallery](https://github.com/microsoft/WinUI-Gallery), [DevWinUI.Gallery](https://github.com/ghost1372/DevWinUI/tree/main/dev/DevWinUI.Gallery), [Files](https://github.com/files-community/files) 등 다른 오픈소스 프로젝트를 찾아보다보니 Services, Helpers, Modules 등 몇 가지 더 보조적인 개념이 있었습니다.

### **WinUI 3**

다만 WinUI 3 생태계 자체는 빈약합니다. [꽤 많은 앱이](https://github.com/DesignLipsx/WinUI-3-Apps-List?tab=readme-ov-file) WinUI 3 프레임워크로 만들어져 있기는 하지만 소재 자체가 개발자의 흥미를 잘 끌지는 않는 건지 완성도 좋은 앱은 매우 드물고, 그중에서 오픈소스로 제공되는 앱은 더더욱 없었습니다.

비슷한 이유로 이 프로젝트를 어떻게 이끌어야 하는지에 대한 자료를 찾기 힘들어서 대부분은 [마이크로소프트에서 제공하는 공식 문서](https://learn.microsoft.com/ko-kr/windows/apps/winui/winui3/)에 의존해야 하지만
+ (???) +
한국어 번역본이 기계 번역으로 만들어져 있어서 용어상의 정확도가 떨어지는 문제 등으로 웬만하면 원문을 찾아봐야 하고, 그리고 또 그런 이유로 어느 수준 이상에서는 AI의 도움을 받기도 어려웠습니다.