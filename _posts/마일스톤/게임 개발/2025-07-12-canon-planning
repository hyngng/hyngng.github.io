---
image:
    path: /2025-07-12-canon-planning/test2.png
    lqip: 
    alt: "오랜만이에요!"

title: "유니티로 모바일 타워디펜스 만들기"

categories: [마일스톤, 게임 개발]
tags: [마일스톤, 게임 개발]
start_with_ads: true

toc: true
toc_sticky: true

date: 2025-07-12 00:00:00 +0900
last_modified_at: 2025-07-12 17:06:00 +0900
---

## **들어가며**

![](큐빅 서바이벌과 행선지)
_이전의 세 프로젝트_

[직전 프로젝트의 경험](https://hyngng.github.io/posts/armonia-developing-cancelled/)으로부터 배운 것 중에 하나는 무언가를 만들 주제를 좀 신중히 정해야 한다는 겁니다. 무언가를 장기간 시간을 두고 개발하는 것은 한편으로는 제가 어떤 맥락에 연루된다는 것이고, 개발하는 과정이 피곤하고 또 어쩌면, 고통스러워질 수도 있습니다.

그래서 이번에는 준비기간을 따로 편성했습니다. 처음부터 어느정도 체계적인 형체가 만들어지기 전까지는 유니티 프로젝트를 생성하지 않을 마음으로 시작했고, 1~2달가량 아이디어 브레인스토밍과 디자인 초안 제작, 문서 작성, 클래스 설계 등 사전작업을 먼저 거쳤습니다. 프로젝트를 지금이라도 취소하고 다른 것을 만드는 것이 낫지 않냐는 고민도 거쳤고, 이런저런 과정 끝에 지금은 새 프로젝트를 열었습니다.

조금 거창하게 표현하긴 했지만, 사실 또다른 관점으로는 겸손한 자세를 떠나 객관적으로 부족한 상태입니다. 아이디어도 부족하고, 작성된 문서도 구멍이 있습니다. 다만 준비를 위한 준비로 변질되기 전에 프로젝트를 실제로 시작하고 싶었고, 누군가에겐 부족하겠지만 제 스스로는 어느정도 체계적이라고 부를 만한 정도는 만들었다고 생각이 들었습니다.

## **디자인이 굉장히 어려웠습니다**

저는 디자인에 대한 근자감이 있습니다. 이는 [그림을 나름 꾸준히 그려오는 것 또는](https://hyngng.github.io/categories/%EA%B7%B8%EB%A6%BC/) [사진을 주기적으로 찍어올리는 것과](https://hyngng.github.io/categories/%EC%97%B0%EB%A7%90-%EC%A0%95%EC%82%B0/) 동일한 맥락입니다. 2차원 형식상의 표현에 있어서는 남들보다 능숙하다고 생각해왔고, 사실 아직도 조금은 그렇게 느낍니다.

그래서 제 기대와 달리 크고 작은 난관이 있을 때마다 "이쪽 분야에 재능이 없나"라는 식의 고통이 있었습니다. 그리고 실제로, 디자인 기조와 기준만 명확하다면 그 다음부턴 '알아서', '저절로' 만들어지리라는 예상과 달리 난관이 많았습니다. 예를 들어 포탑의 스펙을 전달하는 창을 만들 때 

크게 보았을 때 제 목표는 미니멀리즘과 실용주의입니다. 미니멀리즘을 우선시하는 이유는 디자인 코드의 통일성과 개발 비용 절감 때문인데, 그렇다고 실용주의를 무시하는 것은 아닙니다.

그런데 이 둘이 충돌하는 경우가 잦았습니다. 대부분은 아이디어부터가 미니멀하지 않아 표시해야 하는 정보의 수가 근본적으로 많기 때문이지만.

![test4](/2025-07-12-canon-planning/test4.png)
_타워 정보 표시 패널_

1. **정보의 밀도**  
시각적 정보의 밀도와 시간적 정보의 밀도 모두를 고려하기 위해 노력했습니다. 두 가지 관점 모두에서 정보는 너무 많이 주어져서도 안 되고, 너무 적게 주어져서도 안 되므로 정보량이 일정범위 내에서 순환될 수 있도록 유도했습니다.
2. **상호작용**  
플레이어의 선택이 직관적으로 체감될 수 있도록 노력했습니다. 예를 들어 버튼을 누르는 작은 행동에도 여러 겹의 애니메이션과 효과를 적용해 게임 환경에 플레이어의 선택이 반영된다는 느낌을 받을 수 있도록 유도했습니다.
3. **흥미 유도와 지루함 방지**  
정적인 상황은 지루함으로 이어지고, 이는 또다시 사용자 이탈로 이어진다고 보았습니다. 플레이어가 왜 게임을 선택했을까를 생각해봤을 때에도 이는 바람직하지 않습니다. 모든 것을 동적으로 구성할 순 없지만, 이를 완화하기 위해 맵이나 게임 시스템이 허용된 범위 내에서 유동적으로 기능하도록 유도했습니다.

디자인 코드에 관해서, 다른 디자인을 참고하거나 조언을 듣다보면 흔들릴 때가 있는데 이럴 때 스스로를 긍정 편향한 생각을 갖는 것이 좋은 것 같습니다.

## **이번의 핵심 개념 세 가지**

### **알람 패널**

### **맵 관리**

## **클래스 설계는 오히려 쉬웠습니다**

이번의 기술적 목표는 거창하지 않습니다. 이제 명명 규칙이나 SOLID 원칙 등 원활한 프로젝트 관리를 위한 전략, 싱글톤이나 이벤트 주도적 프로그래밍과 같은 디자인 패턴, [안드로이드 앱 핵심 품질](https://developer.android.com/docs/quality-guidelines/core-app-quality?hl=ko) 기준 등 낯설지 않은 개념은 다듬어서 구현하고, 오브젝트 풀링 정도를 새로 시도해보고, 여유가 된다면 멀티스레딩을 시도하거나 프로그램을 [ISO/IEC 25010 품질특성](https://www.iso.org/standard/78176.html)에 맞추어 다듬는 것 정도를 고려하고 있습니다.

달라진 점이 있다면 이번에는 우연찮게 Awesome Lists를 접하게 되었는데 그 중에서 유니티와 관련된 항목, 또 특히 자세히 참고할만한 오픈소스 프로젝트로 [Nodulus](https://github.com/Hyperparticle/nodulus/)를 발견했다는 점입니다. 스크립트 구조나 에셋 관리 등에서 크게 참고할 예정입니다.

{% comment %}
내가 우려하는 건, 메인메뉴에서 플레이 장면을 간접적으로라도 보여주게 되면, 일종의 동어반복이 되고 지루함을 유발할 수도 있을 것 같다.  메인메뉴 - 플레이장면간 동일한 장면을, 씬이 바뀌었는데도 또 보게 되는 거잖아?
{% endcomment %}