---
image:
    path: /2025-07-12-canon-planning/test2.png
    lqip: 
    alt: "정말 오랜만이긴 하다"

title: "유니티로 모바일 타워디펜스 만들기"

categories: [마일스톤, 게임 개발]
tags: [마일스톤, 게임 개발, 유니티, C#, 기획, 개발일지]
start_with_ads: true

toc: true
toc_sticky: true

date: 2025-07-12 00:00:00 +0900
last_modified_at: 2025-07-12 17:06:00 +0900
---

## **들어가며**

![](큐빅 서바이벌과 행선지)
_이전의 세 "마일스톤"_

[직전 프로젝트의 경험](https://hyngng.github.io/posts/armonia-developing-cancelled/)으로부터 배운 것 중에 하나는 주제를 좀 신중히 정해야 한다는 겁니다. 무언가를 장기간 시간을 두고 개발하는 것은 한편으로는 제가 어떤 맥락에 연루된다는 것이고, 개발하는 과정이 피곤하고 또 어쩌면, 고통스러워질 수도 있는 일입니다.

그래서 이번에는 준비기간을 따로 편성했습니다. 처음부터 어느정도 체계적인 형체가 만들어지기 전까지는 유니티 프로젝트를 생성하지 않을 마음으로 시작했고, 1~2달가량 아이디어 브레인스토밍과 디자인 초안 제작, 문서 작성, 클래스 설계 등 사전작업을 먼저 거쳤습니다. 프로젝트를 지금이라도 취소하고 다른 것을 만드는 것이 낫지 않냐는 고민도 거쳤고, 이런저런 과정 끝에 지금은 새 프로젝트를 열었습니다.

조금 거창하게 표현하긴 했지만, 사실 또다른 관점으로는 겸손한 자세를 떠나서 객관적으로 부족합니다. 타워디펜스라는 장르부터가 썩 탐스러워보이지 않고, 그래서인지 아이디어도 치밀하지 않은 부분이 있습니다. 작성된 문서도 구멍이 몇몇군데 보입니다. 다만 완벽함을 쫓다 준비를 위한 준비로 변질되기 전에 프로젝트를 실제로 시작하고 싶어졌고, 어느정도 체계적인 준비가 갖춰졌다는 생각이 들어 지금과 같이 정리된 글을 작성하고 있습니다.

## **모바일 타워디펜스를 만들어보자**

만드는 것의 주제가 타워디펜스인 것은 약간의 도박입니다. 제가 좋아하는 게임 장르로서 애착을 갖고 만들 수 있고, 이미 개발된 타워디펜스류 게임도 많기 때문에 참조할 사례도 많다는 점 때문에 선택했습니다.

그런데 만들다보니 장르가 갖고 있는 근본적인 한계가 조금 보입니다. 2025년에 와서는 장르가 갖고 있는 낡고 정적인 인상도 있고, 그 구조상 게임이 끝나는 지점을 인상적으로 제시하기가 어렵다는 점이 걸립니다. 게임에 새 컨텐츠를 흥미있게 업데이트할만한 제시하기 어려워보입니다.

이런 문제를 보완하는 작업이 조금 필요했습니다. 특정 라운드까지를 보상의 최대치가 정해지는 한 판으로 간주하고 플레이어에게 지금의 게임을 마무리짓고 새 게임을 열 선택지를 제시하는 방향으로 게임을 구성할 예정입니다.

- 왜 타워디펜스인가

게임은 세로로 제공되도록 방향을 잡았습니다. 스마트폰을 사용하는 세로 화면을 그대로 유지할 수 있기 때문입니다. 화면을 돌리는 과정이 일반적으로 번거롭게 느껴지고, 거리감을 조성한다고 생각합니다. 제 생각에 제 게임은 가로 화면을 필수적으로 제공할 필요는 없고

모바일 게임은 단순하고 가벼울수록 좋다고 생각합니다. 입력이 제한적이고

## **디자인이 고생 많았습니다**

저는 디자인에 대한 근자감이 있습니다. 이는 [그림을 나름 꾸준히 그려오는 것이나](https://hyngng.github.io/categories/%EA%B7%B8%EB%A6%BC/) [사진을 주기적으로 찍어올리는 것과](https://hyngng.github.io/categories/%EC%97%B0%EB%A7%90-%EC%A0%95%EC%82%B0/) 동일한 맥락입니다. 2차원 형식상의 표현이라먄 남들보다 유리하다고 생각해왔고, 사실 아직도 "디자인 기조와 기준만 명확하다면 그 다음부턴 '알아서', '저절로' 만들어질 것이다"라는 식으로 조금은 그렇게 느낍니다.

그런데 디자인을 하면서는 크고 작은 난관을 겪을 때마다 이쪽 분야에 재능이 없냐는 식의 고통을 느끼고 있습니다. 그리고 실제로 예상과 달리 난관이 많습니다. 예를 들어 포탑의 스펙을 전달하는 창을 만들 때 

크게 보았을 때 제 목표는 미니멀리즘과 실용주의입니다. 미니멀리즘을 우선시하는 이유는 디자인 코드의 통일성과 개발 비용 절감 때문이지만, 물론 그렇다고 실용주의를 무시하는 것은 아닙니다. 그런데 이 둘이 충돌하는 경우가 잦습니다. 대부분은 아이디어가 미니멀하지 않아서 표시해야 하는 정보의 수가 근본적으로 많기 때문이지만.

![test6](/2025-07-12-canon-planning/test6.png)
_타워 정보 패널의 대략적인 생김새. 어떻게 만들어도 디자인이 별로였다._

- 시각적 정보의 밀도와 시간적 정보의 밀도 모두를 고려했습니다. 두 가지 관점 모두에서 정보는 너무 많이 주어져서도 안 되고, 너무 적게 주어져서도 안 된다는 원칙을 세웠고 정보량이 일정량에서 순환될 수 있도록 노력했습니다.
- 플레이어의 선택이 직관적으로 체감될 수 있도록 노력했습니다. 예를 들어 버튼을 누르는 작은 행동에도 여러 겹의 애니메이션과 효과를 적용해 게임 환경에 플레이어의 선택이 반영된다는 느낌을 받을 수 있도록 유도했습니다.
- 지루함 방지와 흥미 유도를 신경썼습니다. 정적인 상황은 지루함으로 이어지고, 이는 또다시 사용자 이탈로 이어진다고 보았습니다. 플레이어가 왜 게임을 선택했을까를 생각해봤을 때에도 이는 바람직하지 않습니다. 모든 것을 동적으로 구성할 순 없지만, 이를 완화하기 위해 맵이나 게임 시스템이 허용된 범위 내에서 유동적으로 기능하도록 유도했습니다.

디자인 코드에 관해서, 다른 디자인이나 다른 사람의 조언이 내 생각과 상충될 때에는 내 생각을 우선하는 것이 좋은 것 같습니다. 일리가 없다면 문제겠지만

## **클래스 설계는 그에 반해 할만합니다**

![test8-dark](/2025-07-12-canon-planning/test8-dark.png){: .dark }
![test8-light](/2025-07-12-canon-planning/test8-light.png){: .light .border }
_어느정도 정리되면 아예 공개해버릴 예정인 노션 페이지._

이번의 기술적 목표는 거창하지 않습니다. 이제 명명 규칙이나 SOLID 원칙 등 원활한 프로젝트 관리를 위한 전략, 싱글톤이나 이벤트 주도적 프로그래밍과 같은 디자인 패턴, [안드로이드 앱 핵심 품질](https://developer.android.com/docs/quality-guidelines/core-app-quality?hl=ko) 기준 등 낯설지 않은 개념은 다듬어서 구현하고 여유가 될 때마다 다음중 하나를 새로 사용해보는 것이 목적입니다.

- [GPGS](https://developer.android.com/games/pgs/unity/overview?hl=ko)
- 오브젝트 풀링
- 멀티스레딩
- 유니티 애널리틱스
- 안드로이드 토스트 알람
- [ISO/IEC 25010 품질특성](https://www.iso.org/standard/78176.html)

이번에는 우연찮게 [Awesome Lists](https://github.com/sindresorhus/awesome)를 알게 되었는데 그 중에서 유니티와 관련된 항목, 또 특히 자세히 참고할만한 오픈소스 프로젝트로 [Nodulus](https://github.com/Hyperparticle/nodulus/)를 발견했습니다. 실제로 프로젝트가 어떻게 관리되는지에 대한 감이 부족해 어려움이 있었는데 스크립트 구조나 에셋 관리 등에서 크게 참고할 예정입니다.

이외에 좀 더 생각이 필요한 독자적인 기능은 다음과 같이 별도로 정리했습니다.

### **분할 슬라이더**

![test7](슬라이더 컴포넌트){: .w-25 }
_분할 슬라이더_

게임 곳곳에 사용할 UI입니다. 설정창에서도 사용하고, 플레이 진입 전 난이도 설정 단계에서도 여러 차례 사용할 예정입니다. 단, 슬라이더의 기능은 환경에 맞추어 다르게 제공됩니다.

흔하고 뻔한 슬라이더에 대한 내용을 별도의 단락을 할당해가면서 적는 이유는 기존과 다르게 이를 재사용에 초점을 맞추어 설계하고 있기 때문입니다. 아예 이 게임에 대한 내용을 완전 까먹은 미래의 저조차 쉽게 사용할 수 있을 정도로, 또는 이를 에셋으로 배포해도 이상하지 않을 정도로 독립된 객체로서 유연하게 대응할 수 있게 만드는 것이 목표입니다.

려던 찰나, 유니티에서 기본적으로 제공하는 슬라이더에 Whole numbers로 분할 슬라이더를 간단히 구현할 수 있음을 발견했습니다. 슬라이더 객체를 처음부터 새로 설계하기보다는 유니티가 제공하는 `Sliders.cs`를 수정해서 사용하려고 합니다. 제가 원하는 기능읃 다음과 같습니다.

- 화면에 표시될 값과, 실제 설정된 값을 딕셔너리로 관리합니다.

### **알람 패널**

![test7](/2025-07-12-canon-planning/test7.png){: .w-25 }
_예시 알람 패널_

게임 플레이 도중의 정보 전달을 맡을 객체입니다. 모습은 모바일 OS의 상단 패널에서 기대할 수 있는 알람과 비슷하지만, 발상과 모티브는 배틀필드의 피드백 UI, 그리고 제 블로그 테마와 옵시디언, 그리고 기타 여러 문서 페이지에서 인용되는 알람 컴포넌트 개념에서 따왔습니다. `info`, `tooltip`, `warning`, `danger` 구분과 비슷하게 알람은 등급에 따라 구별되며, 알람은 일정 시간이 지나면 사라집니다. 보다 세부적으로는 다음의 규칙을 따라갑니다.

- 스택과 같이 선입선출을 원칙으로 관리되며 화면에 표시되는 알람은 최대 3개로 제한됩니다.
- 어떤 알람은 중요하게 취급되어 선입선출 원칙을 무시하고 더 하위에 표시됩니다.
- 알람은 항상 첫 번째 레이어에 위치하며 다른 UI에 가려지지 않고 우선적으로 표시됩니다.

관리를 위해 세 가지 클래스 `UINotification`와 `UINotificationPanel`, `NotificationEventChannelSO`를 이용할 생각입니다. 알람은 사진으로 제시된 예시 이외에도 여럿 있을 수 있으므로 알람에 대한 정보는 인스턴스나 프리팹으로 사전에 미리 존재한다기보다는, 알람을 호출하는 객체가 그때그때 정보를 제시하는 형태가 될 것이고 이 과정은 이벤트 주도적 프로그래밍과 스크립터블 오브젝트를 통해 구현할 예정입니다.

### **맵 관리**

맵은 중요합니다.

{% comment %}
내가 우려하는 건, 메인메뉴에서 플레이 장면을 간접적으로라도 보여주게 되면, 일종의 동어반복이 되고 지루함을 유발할 수도 있을 것 같다.  메인메뉴 - 플레이장면간 동일한 장면을, 씬이 바뀌었는데도 또 보게 되는 거잖아?
{% endcomment %}