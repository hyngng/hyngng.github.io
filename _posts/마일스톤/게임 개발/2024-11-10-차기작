---
title: ""

categories: []
tags: []
start_with_ads: true

toc: true
toc_sticky: true

date: 2024-12-01 00:00:00 +0900
last_modified_at: 2024-12-01 00:00:00 +0900
---

지금까지는 완성된 작업물을 간략히 정리하는 식으로 글을 작성했다면, 이제는 작은 단계의 개발물을 좀 더 적극적으로 문서화하려고 함.

요건
- 내가 실제로 끝까지 개발할 수 있을 정도로 아이디어의 무게를 축소하고, 추상화하고, 간편화하기

벌써 연말이네. 이번엔 간단히 끝내려고 함.

- 노션을 작성하면서 뭔가 만들어지고 있다는 분위기에 취하지 않으려 노력함

- 게임 개발은 더이상 새로운게 아니다. 다른 일도 많은데, 나는 왜 하필 게임 개발을 하려 할까?

## **새로 시도한 사항**

- 스크립터블 오브젝트 사용해봄.

이번에 새로 시도해본 코딩 스탠스인데 웬만한 기능은 모듈화했음. 예를 들어 예전에는 GameManager에 이벤트 주도적 프로그래밍을 위한 함수 등록, PlayerPrefs 데이터 읽고쓰기 등 많은 책임을 직접 물렸다면 이번에는 외부 인스턴스를 기용하는 방식으로 책임을 최대한 분할했음.

## 1. 다크모드, 라이트모드 전환 구현

- 스크립터블 오브젝트 사용해봄. 데이터 저장이면 당연히 JSON인줄 알았는데 훨씬 간단하고 직관적이었음. 클래스 하나 만들면 데이터 인스턴스 여러개 만들 수 있는 느낌이라 편했음.
- TurnToLightMode에서 LightModeOn 등 고민하다가 그냥 해리포터? 빌려 Lumos, Nox 개념 사용하니 편했음.

## 2. 컴포넌트를 사용하는 방법

나는 각 컴포넌트에 본인들이 판단해서 본인들이 보고하고 소통하는 체계를 만들고 싶었다. 자율성을 부여하되 중앙집권형 권력을 만들어 최고위 클래스가 하위 클래스를 통제할 수 있도록 만드려 했다.

```cs
public GameObject Theme;
private Theme theme;

void Awake()
{
    theme = Theme.GetComponent<Theme>();
}
```

그래서 이런 구조가 만들어졌다. 게임오브젝트는 실제로 존재하며, 매니저 클래스를 맡는다.

```cs
[Header("Opened")]
public GameObject Theme

[Header("Closed")]
public Palette Light;
public Palette Dark;
```

public은 두 가지로 나뉜다. 타 클래스와의 소통을 위해 public으로 공개되는 변수, 인스펙터창에서 한 번의 입력을 받는 변수.
